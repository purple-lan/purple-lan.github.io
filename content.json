{"meta":{"title":"Frank's Blog","subtitle":"NO GAME NO LIFE","description":"good!","author":"m","url":"http://yoursite.com","root":"/"},"pages":[{"title":"tags","date":"2021-11-18T07:50:52.000Z","updated":"2021-11-18T07:56:07.068Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"tags","date":"2021-11-22T07:34:39.000Z","updated":"2021-11-22T08:21:26.311Z","comments":true,"path":"tags/index-1.html","permalink":"http://yoursite.com/tags/index-1.html","excerpt":"","text":""},{"title":"Downloads","date":"2021-11-22T06:42:59.000Z","updated":"2021-11-22T06:42:59.960Z","comments":true,"path":"Downloads/index.html","permalink":"http://yoursite.com/Downloads/index.html","excerpt":"","text":""},{"title":"categories","date":"2021-11-22T07:34:16.000Z","updated":"2021-11-22T08:21:27.838Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2021-11-18T07:57:07.000Z","updated":"2021-11-18T07:57:31.218Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"Python之cv2、np","slug":"Python之cv2、np","date":"2021-12-06T07:53:21.000Z","updated":"2021-12-06T08:24:19.864Z","comments":true,"path":"2021/12/06/Python之cv2、np/","link":"","permalink":"http://yoursite.com/2021/12/06/Python%E4%B9%8Bcv2%E3%80%81np/","excerpt":"","text":"这篇文章主要是看TransFuse学到的opencv和numpy记录，其主要作用是将图像打包成npy格式 opencv库 读取图片 123456import cv2# opencv读取的图像是BGRpath = 'image.jpg'img = cv2.imread(path)# 需要将图片转换成RGBimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) 修改图片尺寸 12345# opencv读取的图片是（高，宽，通道）的形式# 调整的尺寸格式是（宽，高）img = cv2.resize(img, (width, height))print(img.shape)输出：(高，宽，通道) numpy库 建立存储批量图像的数组 1234567import numpy as np# 建立一个空白数组用于存储# np.uint8表示矩阵类型是在0-255之间# np.zeros([图像数量，高，宽，通道])imgs = np.uint8(np.zeros([length, height, width, 3]))# 将图像img(高，宽，通道)存入imgs数组里imgs[i] = img 保存图像为npy格式 12# 将存储好图像的imgs数组以npy格式保存到root目录下，命名为data.npynp.save('{}/data.npy'.format(root), imgs)","categories":[],"tags":[]},{"title":"Python之字符串","slug":"Python之字符串","date":"2021-12-06T07:34:16.000Z","updated":"2021-12-06T08:24:19.865Z","comments":true,"path":"2021/12/06/Python之字符串/","link":"","permalink":"http://yoursite.com/2021/12/06/Python%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2/","excerpt":"","text":"学习过程中用到的一些字符串的用法。 字符串替换 12345str = 'there is a big apple, no it is pig.'# 将字符串里的'is'替换为'was'm = str.replace('is','was')print(m)输出：there was a big apple, no it was pig. 字符串分割 1234567str = 'there is a big apple, no it is pig.'# 以字符'a'进行分割sp = str.split('a')print(sp)输出：['this is ', ' big ', 'pple, no it is pig.']print(len(sp))输出：3","categories":[],"tags":[]},{"title":"Python之json","slug":"Python之json","date":"2021-12-01T09:05:56.000Z","updated":"2021-12-06T08:24:19.864Z","comments":true,"path":"2021/12/01/Python之json/","link":"","permalink":"http://yoursite.com/2021/12/01/Python%E4%B9%8Bjson/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Python之pydicom库","slug":"Python之pydicom库","date":"2021-11-26T07:12:46.000Z","updated":"2021-11-26T14:38:35.042Z","comments":true,"path":"2021/11/26/Python之pydicom库/","link":"","permalink":"http://yoursite.com/2021/11/26/Python%E4%B9%8Bpydicom%E5%BA%93/","excerpt":"","text":"这篇文章主要是对CT图片中CT.dcm格式、RS.dcm格式你的一些操作。 对RS.dcm的操作 dcmread：对RS文件的读取 12root = r'3675.20210523161259.540375.dcm'RS = pydicom.dcmread(root) StructureSetROISequence：医生对病人做的所有标注 1234567root = r'3675.20210523161259.540375.dcm'RS = pydicom.dcmread(root)num_is = RS.StructureSetROISequencefor a in range(len(num_is)): num_i = str(num_is[a]) print(a)输出：医生做的每一个标注 目的是根据所需要的标注LO来获取对应标签IS ROIContourSequence：根据标签IS获取被标注过CT图的UID 123456789# 获取的标签IS为3，但是搜索时是从0开始的，所以要减1lab = 3lab = lab - 1# 获取IS=3的标注的所有CT图片contour_sequence = RS.ROIContourSequence[lab]# 获取被标注图片的数量gtv_nu = len(contour_sequence.ContourSequence)# 获取CT图片的UIDUID = contour_sequence.ContourImageSequence[0].ReferencedSOPInstanceUID 对CT图的操作 pixel_array：读取CT图 12345root = r'3675.20210523161259.540375.dcm'# 读取dcm文件CT = pydicom.dcmread(root)# 读取图像矩阵image = CT.pixel_array PixelSpacing：对CT图片初始操作获取相应的值 12345678910111213root = r'3675.20210523161259.540375.dcm'# 读取dcm文件CT = pydicom.dcmread(root)# x轴和y轴像素间的物理间距（mm）spacing = CT.PixelSpacing# 将对应轴的物理距离赋值x_gap = pixel_spacing[0]y_gap = pixel_spacing[1]# 获取x，y，z轴的初始点，即世界原点坐标image_position_start = CT.ImagePositionPatientx_start = float(image_position_starting[0])y_start = float(image_position_starting[1])z_start = float(image_position_starting[2]) ContourData：对勾勒信息进行处理 1234567# 获取勾勒信息，不过它是x，y，z三个坐标循环显示contours = contour_sequence.ContourData# 获取对应的x，y坐标，并转换为数组x_contours = [float(number) for number in contours[0::3]]y_contours = [float(number) for number in contours[1::3]]x_contours = np.array(x_coords_of_contours)y_contours = np.array(y_coords_of_contours) 将世界坐标转成相机坐标 12345# x_contours，y_contours为世界x，y坐标# x_start，y_start为世界原点坐标# x_gap，y_gap为现实物理距离（mm）x_pixel = (x_contours - x_start) / x_gapy_pixel = (y_contours - y_start) / y_gap 最后获得的x_pixel，y_pixel为相机的x，y坐标","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"},{"name":"pydicom","slug":"pydicom","permalink":"http://yoursite.com/tags/pydicom/"}]},{"title":"Python之txt、excel操作","slug":"Python之txt文本读写与搜索","date":"2021-11-25T11:51:04.000Z","updated":"2021-11-26T14:08:51.013Z","comments":true,"path":"2021/11/25/Python之txt文本读写与搜索/","link":"","permalink":"http://yoursite.com/2021/11/25/Python%E4%B9%8Btxt%E6%96%87%E6%9C%AC%E8%AF%BB%E5%86%99%E4%B8%8E%E6%90%9C%E7%B4%A2/","excerpt":"","text":"这篇文章主要是记录在做第一次项目中所用到的re库和pandas库读txt、excel文件的操作代码记录，不仅为了记录学习足迹，也为了以后用方便copy。 re库的操作 主要是re.sub()的使用 re.sub：获取字符串固定位置上的数字 12345text = '/Contour Image 6 Sequence 1 item'num = re.sub(r'\\D', \"\", text[-7:])# text[-7:]这种是固定区域搜素print(num)输出：1 txt文本读写、搜索 open：读取txt文件 123456dir = 'loss.txt'dir_r = open(dir, 'r')content = dir_r.read()print(content)dir_r.close()输出：以字符串的形式将txt的内容显示出来 注意：使用open()最后要close(),而像下面这种使用with open() 本身就自带close(),所以不用写close(). write：在txt文件写入内容 123loss = 'i , 2 , 6 . 9'with open('loss.txt','w') as f: f.write(str(loss)) 注意：写入的内容必须是字符串格式 find：在字符串中搜索关键字 1234d = '_is = RS.StructureSetROI'keyword = '.S'if d.find(keyword)!= -1: print('yes') 主要是在字符串内进行搜索关键词，返回是否存在，可以运用在对txt文本内容的搜索。 truncate：清空txt文件内容 12with open(r'loss.txt', 'a+', encoding='utf-8') as test: test.truncate(0) eval：将字符串转换为对应的列表、字典、元祖 1234t = \"{1:'a', 2:'b', 3:'d'}\"b = eval(t)print(type(b),b)输出：&lt;class,'str'&gt;, {1:'a', 2:'b', 3:'d'} 注意：只适用于存储形式就是对应的列表、字典、元祖其与str()函数作用正好相反 pandas库的操作 read_excel：excel的读取 1234567import pandas as pdroot = r'/Users/frank/Desktop/1.xlsx'df = pd.read_excel(root)# 获取excel里面的所有值data = df.valuesprint(data)输出：会形成一个多维数组，data[i]表示第几行的全部数组 dict：转换读取的数据 1234df = pd.read_excel(root)data = dict(df.values)print(data)输出：可以转换成一个字典，使其每行一一对应","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"},{"name":"re","slug":"re","permalink":"http://yoursite.com/tags/re/"},{"name":"txt","slug":"txt","permalink":"http://yoursite.com/tags/txt/"},{"name":"pandas","slug":"pandas","permalink":"http://yoursite.com/tags/pandas/"}]},{"title":"Python库之os","slug":"Python库之os","date":"2021-11-25T05:40:13.000Z","updated":"2021-11-25T14:48:57.586Z","comments":true,"path":"2021/11/25/Python库之os/","link":"","permalink":"http://yoursite.com/2021/11/25/Python%E5%BA%93%E4%B9%8Bos/","excerpt":"","text":"这篇文章主要是记录在做第一次项目中所用到的os库代码的记录，不仅为了记录学习足迹，也为了以后用方便copy。 os库函数基本应用 join：合并两个地址 12345root_path = r'/Users/frank/Desktop'name = 'image.jpg'path = os.path.join(root_path, name)print(path)输出：/Users/frank/Desktop/image.jpg basename：分离地址下最后一个文件名 1234root_path = r'/Users/frank/Desktop/image.jpg'name = os.path.basename(root_path)print(name)输出：image.jpg isfile：查找文件是否存在 123root_path = r'/Users/frank/Desktop/image.jpg'if os.path.isfile(root_path): print('yes') splitext：分离文件的文件名和后缀 1234name = '/Users/frank/Desktop/image.jpg'a = os.path.splitext(name)print(a)输出：'/Users/frank/Desktop/image','.jpg' os.listdir：查找当前目录下的所有文件和文件夹（仅当前目录） 12345678root = r'/Users/frank/Desktop/files'path_list = os.listdir(root)# 对文件夹的内容进行排序path_list.sort()for name in path_list: files_name = os.path.join(root, name) print(name)输出：image1.jpg,image2.jpg,image3.jpg...... os.walk：查找目录下所有的文件或文件夹（包括文件夹里还存放的文件） 123456789root = r'/Users/frank/Desktop/files'for root, dirs, files in os.walk(root): for name in files: files_name = os.path.join(root, name) print(files_name)输出：/Users/frank/Desktop/files/img.jpg /Users/frank/Desktop/files/image/m.jpg /Users/frank/Desktop/files/image/zz.jpg /Users/frank/Desktop/files/image/lab/xx.csv 这个代码是读取根目录下的所有目录文件和文件夹，不仅仅是当前目录下的文件。 通过关键词查找文件 12345678910111213141516171819202122root_path = r'/Users/frank/Desktop/files/image'keyword = 'imag'def findfile(keyword, root_path):# keyword为关键字，root为文件夹路径 filelist = [] # 存放每个文件 rfilelist = [] # 存放匹配文件 for root, dirs, files in os.walk(root): for name in files: filelist.append(os.path.join(root, name)) # 遍历路径文件下的所有文件夹，将所有文件放入filelist # i为文件的绝对地址 for i in filelist: if os.path.isfile(i): # basename函数将地址最后文件名分离出来 if keyword in os.path.basename(i): rfilelist.append(i) else: pass else: pass return rfilelist输出：在image文件夹内查找存在“imag”的文件地址","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"},{"name":"os","slug":"os","permalink":"http://yoursite.com/tags/os/"}]}],"categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"},{"name":"pydicom","slug":"pydicom","permalink":"http://yoursite.com/tags/pydicom/"},{"name":"re","slug":"re","permalink":"http://yoursite.com/tags/re/"},{"name":"txt","slug":"txt","permalink":"http://yoursite.com/tags/txt/"},{"name":"pandas","slug":"pandas","permalink":"http://yoursite.com/tags/pandas/"},{"name":"os","slug":"os","permalink":"http://yoursite.com/tags/os/"}]}