{"meta":{"title":"Frank's Blog","subtitle":"NO GAME NO LIFE","description":"good!","author":"m","url":"http://yoursite.com","root":"/"},"pages":[{"title":"Downloads","date":"2021-11-22T06:42:59.000Z","updated":"2021-11-22T06:42:59.960Z","comments":true,"path":"Downloads/index.html","permalink":"http://yoursite.com/Downloads/index.html","excerpt":"","text":""},{"title":"categories","date":"2021-11-22T07:34:16.000Z","updated":"2021-11-22T08:21:27.838Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2021-11-18T07:57:07.000Z","updated":"2021-11-18T07:57:31.218Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"tags","date":"2021-11-18T07:50:52.000Z","updated":"2021-11-18T07:56:07.068Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"tags","date":"2021-11-22T07:34:39.000Z","updated":"2021-11-22T08:21:26.311Z","comments":true,"path":"tags/index-1.html","permalink":"http://yoursite.com/tags/index-1.html","excerpt":"","text":""}],"posts":[{"title":"Python之pydicom库","slug":"Python之pydicom库","date":"2021-11-26T07:12:46.000Z","updated":"2021-11-26T13:36:57.116Z","comments":true,"path":"2021/11/26/Python之pydicom库/","link":"","permalink":"http://yoursite.com/2021/11/26/Python%E4%B9%8Bpydicom%E5%BA%93/","excerpt":"","text":"这篇文章主要是对CT图片中CT.dcm格式、RS.dcm格式你的一些操作。 对RS.dcm的操作 dcmread：对RS文件的读取 12root = r'3675.20210523161259.540375.dcm'RS = pydicom.dcmread(root) StructureSetROISequence：医生对病人做的所有标注 1234567root = r'3675.20210523161259.540375.dcm'RS = pydicom.dcmread(root)num_is = RS.StructureSetROISequencefor a in range(len(num_is)): num_i = str(num_is[a]) print(a)输出：医生做的每一个标注 目的是根据所需要的标注LO来获取对应标签IS ROIContourSequence：根据标签IS获取被标注过CT图的UID 123456789# 获取的标签IS为3，但是搜索时是从0开始的，所以要减1lab = 3lab = lab - 1# 获取IS=3的标注的所有CT图片contour_sequence = RS.ROIContourSequence[lab]# 获取被标注图片的数量gtv_nu = len(contour_sequence.ContourSequence)# 获取CT图片的UIDUID = contour_sequence.ContourImageSequence[0].ReferencedSOPInstanceUID 对CT图的操作 pixel_array：读取CT图 12345root = r'3675.20210523161259.540375.dcm'# 读取dcm文件CT = pydicom.dcmread(root)# 读取图像矩阵image = CT.pixel_array PixelSpacing：对CT图的勾勒信息进行读取处理 1234567891011121314root = r'3675.20210523161259.540375.dcm'# 读取dcm文件CT = pydicom.dcmread(root)# x轴和y轴像素间的物理间距（mm）spacing = CT.PixelSpacing# 将对应轴的物理距离赋值x_gap = pixel_spacing[0]y_gap = pixel_spacing[1]# 获取x，y，z轴的初始点image_position_start = CT.ImagePositionPatientx_start = float(image_position_starting[0])y_start = float(image_position_starting[1])z_start = float(image_position_starting[2])","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"},{"name":"pydicom","slug":"pydicom","permalink":"http://yoursite.com/tags/pydicom/"}]},{"title":"Python之txt、excel操作","slug":"Python之txt文本读写与搜索","date":"2021-11-25T11:51:04.000Z","updated":"2021-11-26T08:46:07.190Z","comments":true,"path":"2021/11/25/Python之txt文本读写与搜索/","link":"","permalink":"http://yoursite.com/2021/11/25/Python%E4%B9%8Btxt%E6%96%87%E6%9C%AC%E8%AF%BB%E5%86%99%E4%B8%8E%E6%90%9C%E7%B4%A2/","excerpt":"","text":"这篇文章主要是记录在做第一次项目中所用到的re库和pandas库读txt、excel文件的操作代码记录，不仅为了记录学习足迹，也为了以后用方便copy。 re库的操作 主要是re.sub()的使用 re.sub：获取字符串固定位置上的数字 12345text = '/Contour Image 6 Sequence 1 item'num = re.sub(r'\\D', \"\", text[-7:])# text[-7:]这种是固定区域搜素print(num)输出：1 txt文本读写、搜索 open：读取txt文件 123456dir = 'loss.txt'dir_r = open(dir, 'r')content = dir_r.read()print(content)dir_r.close()输出：以字符串的形式将txt的内容显示出来 注意：使用open()最后要close(),而像下面这种使用with open() 本身就自带close(),所以不用写close(). write：在txt文件写入内容 123loss = 'i , 2 , 6 . 9'with open('loss.txt','w') as f: f.write(str(loss)) 注意：写入的内容必须是字符串格式 find：在字符串中搜索关键字 1234d = '_is = RS.StructureSetROI'keyword = '.S'if d.find(keyword)!= -1: print('yes') 主要是在字符串内进行搜索关键词，返回是否存在，可以运用在对txt文本内容的搜索。 truncate：清空txt文件内容 12with open(r'loss.txt', 'a+', encoding='utf-8') as test: test.truncate(0) eval：将字符串转换为对应的列表、字典、元祖 1234t = \"{1:'a', 2:'b', 3:'d'}\"b = eval(t)print(type(b),b)输出：&lt;class,'str'&gt;, {1:'a', 2:'b', 3:'d'} 注意：只适用于存储形式就是对应的列表、字典、元祖其与str()函数作用正好相反 pandas库的操作 read_excel：excel的读取 1234567import pandas as pdroot = r'/Users/frank/Desktop/1.xlsx'df = pd.read_excel(root)# 获取excel里面的所有值data = df.valuesprint(data)输出：会形成一个多维数组，data[i]表示第几行的全部数组 dict：转换读取的数据 1234df = pd.read_excel(root)data = dict(df.values)print(data)输出：可以转换成一个字典，使其每行一一对应","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"},{"name":"re","slug":"re","permalink":"http://yoursite.com/tags/re/"},{"name":"txt","slug":"txt","permalink":"http://yoursite.com/tags/txt/"},{"name":"pandas","slug":"pandas","permalink":"http://yoursite.com/tags/pandas/"}]},{"title":"Python库之os","slug":"Python库之os","date":"2021-11-25T05:40:13.000Z","updated":"2021-11-25T14:48:57.586Z","comments":true,"path":"2021/11/25/Python库之os/","link":"","permalink":"http://yoursite.com/2021/11/25/Python%E5%BA%93%E4%B9%8Bos/","excerpt":"","text":"这篇文章主要是记录在做第一次项目中所用到的os库代码的记录，不仅为了记录学习足迹，也为了以后用方便copy。 os库函数基本应用 join：合并两个地址 12345root_path = r'/Users/frank/Desktop'name = 'image.jpg'path = os.path.join(root_path, name)print(path)输出：/Users/frank/Desktop/image.jpg basename：分离地址下最后一个文件名 1234root_path = r'/Users/frank/Desktop/image.jpg'name = os.path.basename(root_path)print(name)输出：image.jpg isfile：查找文件是否存在 123root_path = r'/Users/frank/Desktop/image.jpg'if os.path.isfile(root_path): print('yes') splitext：分离文件的文件名和后缀 1234name = '/Users/frank/Desktop/image.jpg'a = os.path.splitext(name)print(a)输出：'/Users/frank/Desktop/image','.jpg' os.listdir：查找当前目录下的所有文件和文件夹（仅当前目录） 12345678root = r'/Users/frank/Desktop/files'path_list = os.listdir(root)# 对文件夹的内容进行排序path_list.sort()for name in path_list: files_name = os.path.join(root, name) print(name)输出：image1.jpg,image2.jpg,image3.jpg...... os.walk：查找目录下所有的文件或文件夹（包括文件夹里还存放的文件） 123456789root = r'/Users/frank/Desktop/files'for root, dirs, files in os.walk(root): for name in files: files_name = os.path.join(root, name) print(files_name)输出：/Users/frank/Desktop/files/img.jpg /Users/frank/Desktop/files/image/m.jpg /Users/frank/Desktop/files/image/zz.jpg /Users/frank/Desktop/files/image/lab/xx.csv 这个代码是读取根目录下的所有目录文件和文件夹，不仅仅是当前目录下的文件。 通过关键词查找文件 12345678910111213141516171819202122root_path = r'/Users/frank/Desktop/files/image'keyword = 'imag'def findfile(keyword, root_path):# keyword为关键字，root为文件夹路径 filelist = [] # 存放每个文件 rfilelist = [] # 存放匹配文件 for root, dirs, files in os.walk(root): for name in files: filelist.append(os.path.join(root, name)) # 遍历路径文件下的所有文件夹，将所有文件放入filelist # i为文件的绝对地址 for i in filelist: if os.path.isfile(i): # basename函数将地址最后文件名分离出来 if keyword in os.path.basename(i): rfilelist.append(i) else: pass else: pass return rfilelist输出：在image文件夹内查找存在“imag”的文件地址","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"},{"name":"os","slug":"os","permalink":"http://yoursite.com/tags/os/"}]},{"title":"我的第一篇博客","slug":"我的第一篇博客","date":"2021-11-22T06:32:49.000Z","updated":"2021-11-22T06:34:39.047Z","comments":true,"path":"2021/11/22/我的第一篇博客/","link":"","permalink":"http://yoursite.com/2021/11/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"简介 这是我的第一篇‘Hexo’","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2021-11-18T05:43:16.463Z","updated":"2021-11-23T06:22:05.476Z","comments":true,"path":"2021/11/18/hello-world/","link":"","permalink":"http://yoursite.com/2021/11/18/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1hexo new \"My New Post\" More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"},{"name":"pydicom","slug":"pydicom","permalink":"http://yoursite.com/tags/pydicom/"},{"name":"re","slug":"re","permalink":"http://yoursite.com/tags/re/"},{"name":"txt","slug":"txt","permalink":"http://yoursite.com/tags/txt/"},{"name":"pandas","slug":"pandas","permalink":"http://yoursite.com/tags/pandas/"},{"name":"os","slug":"os","permalink":"http://yoursite.com/tags/os/"}]}