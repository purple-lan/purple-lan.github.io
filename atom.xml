<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Frank&#39;s Blog</title>
  
  <subtitle>NO GAME NO LIFE</subtitle>
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-12-06T08:24:19.864Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>m</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python之cv2、np</title>
    <link href="http://yoursite.com/2021/12/06/Python%E4%B9%8Bcv2%E3%80%81np/"/>
    <id>http://yoursite.com/2021/12/06/Python%E4%B9%8Bcv2%E3%80%81np/</id>
    <published>2021-12-06T07:53:21.000Z</published>
    <updated>2021-12-06T08:24:19.864Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章主要是看TransFuse学到的opencv和numpy记录，其主要作用是将图像打包成npy格式</p>        <h2 id="opencv库">          <a href="#opencv库" class="heading-link"><i class="fas fa-link"></i></a><a href="#opencv库" class="headerlink" title="opencv库"></a>opencv库</h2>              <h3 id="读取图片">          <a href="#读取图片" class="heading-link"><i class="fas fa-link"></i></a><a href="#读取图片" class="headerlink" title="读取图片"></a>读取图片</h3>      <figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="comment"># opencv读取的图像是BGR</span></span><br><span class="line">path = <span class="string">'image.jpg'</span></span><br><span class="line">img = cv2.imread(path)</span><br><span class="line"><span class="comment"># 需要将图片转换成RGB</span></span><br><span class="line">img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</span><br></pre></td></tr></tbody></table></div></figure>        <h3 id="修改图片尺寸">          <a href="#修改图片尺寸" class="heading-link"><i class="fas fa-link"></i></a><a href="#修改图片尺寸" class="headerlink" title="修改图片尺寸"></a>修改图片尺寸</h3>      <figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># opencv读取的图片是（高，宽，通道）的形式</span></span><br><span class="line"><span class="comment"># 调整的尺寸格式是（宽，高）</span></span><br><span class="line">img = cv2.resize(img, (width, height))</span><br><span class="line"><span class="built_in">print</span>(img.shape)</span><br><span class="line">输出：(高，宽，通道)</span><br></pre></td></tr></tbody></table></div></figure>        <h2 id="numpy库">          <a href="#numpy库" class="heading-link"><i class="fas fa-link"></i></a><a href="#numpy库" class="headerlink" title="numpy库"></a>numpy库</h2>              <h3 id="建立存储批量图像的数组">          <a href="#建立存储批量图像的数组" class="heading-link"><i class="fas fa-link"></i></a><a href="#建立存储批量图像的数组" class="headerlink" title="建立存储批量图像的数组"></a>建立存储批量图像的数组</h3>      <figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 建立一个空白数组用于存储</span></span><br><span class="line"><span class="comment"># np.uint8表示矩阵类型是在0-255之间</span></span><br><span class="line"><span class="comment"># np.zeros([图像数量，高，宽，通道])</span></span><br><span class="line">imgs = np.uint8(np.zeros([length, height, width, <span class="number">3</span>]))</span><br><span class="line"><span class="comment"># 将图像img(高，宽，通道)存入imgs数组里</span></span><br><span class="line">imgs[i] = img</span><br></pre></td></tr></tbody></table></div></figure>        <h3 id="保存图像为npy格式">          <a href="#保存图像为npy格式" class="heading-link"><i class="fas fa-link"></i></a><a href="#保存图像为npy格式" class="headerlink" title="保存图像为npy格式"></a>保存图像为npy格式</h3>      <figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将存储好图像的imgs数组以npy格式保存到root目录下，命名为data.npy</span></span><br><span class="line">np.save(<span class="string">'{}/data.npy'</span>.<span class="built_in">format</span>(root), imgs)</span><br></pre></td></tr></tbody></table></div></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这篇文章主要是看TransFuse学到的opencv和numpy记录，其主要作用是将图像打包成npy格式&lt;/p&gt;

        &lt;h2 id=&quot;opencv库&quot;&gt;
          &lt;a href=&quot;#opencv库&quot; class=&quot;heading-link&quot;&gt;&lt;i </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python之字符串</title>
    <link href="http://yoursite.com/2021/12/06/Python%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://yoursite.com/2021/12/06/Python%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2021-12-06T07:34:16.000Z</published>
    <updated>2021-12-06T08:24:19.865Z</updated>
    
    <content type="html"><![CDATA[<p>学习过程中用到的一些字符串的用法。</p>        <h3 id="字符串替换">          <a href="#字符串替换" class="heading-link"><i class="fas fa-link"></i></a><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h3>      <figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">'there is a big apple, no it is pig.'</span></span><br><span class="line"><span class="comment"># 将字符串里的'is'替换为'was'</span></span><br><span class="line">m = <span class="built_in">str</span>.replace(<span class="string">'is'</span>,<span class="string">'was'</span>)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line">输出：there was a big apple, no it was pig.</span><br></pre></td></tr></tbody></table></div></figure>        <h3 id="字符串分割">          <a href="#字符串分割" class="heading-link"><i class="fas fa-link"></i></a><a href="#字符串分割" class="headerlink" title="字符串分割"></a>字符串分割</h3>      <figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">'there is a big apple, no it is pig.'</span></span><br><span class="line"><span class="comment"># 以字符'a'进行分割</span></span><br><span class="line">sp = <span class="built_in">str</span>.split(<span class="string">'a'</span>)</span><br><span class="line"><span class="built_in">print</span>(sp)</span><br><span class="line">输出：[<span class="string">'this is '</span>, <span class="string">' big '</span>, <span class="string">'pple, no it is pig.'</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(sp))</span><br><span class="line">输出：<span class="number">3</span></span><br></pre></td></tr></tbody></table></div></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;学习过程中用到的一些字符串的用法。&lt;/p&gt;

        &lt;h3 id=&quot;字符串替换&quot;&gt;
          &lt;a href=&quot;#字符串替换&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#字</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python之json</title>
    <link href="http://yoursite.com/2021/12/01/Python%E4%B9%8Bjson/"/>
    <id>http://yoursite.com/2021/12/01/Python%E4%B9%8Bjson/</id>
    <published>2021-12-01T09:05:56.000Z</published>
    <updated>2021-12-06T08:24:19.864Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Python之pydicom库</title>
    <link href="http://yoursite.com/2021/11/26/Python%E4%B9%8Bpydicom%E5%BA%93/"/>
    <id>http://yoursite.com/2021/11/26/Python%E4%B9%8Bpydicom%E5%BA%93/</id>
    <published>2021-11-26T07:12:46.000Z</published>
    <updated>2021-11-26T14:38:35.042Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章主要是对CT图片中CT.dcm格式、RS.dcm格式你的一些操作。</p>        <h2 id="对RS-dcm的操作">          <a href="#对RS-dcm的操作" class="heading-link"><i class="fas fa-link"></i></a><a href="#对RS-dcm的操作" class="headerlink" title="对RS.dcm的操作"></a>对RS.dcm的操作</h2>              <h3 id="dcmread：对RS文件的读取">          <a href="#dcmread：对RS文件的读取" class="heading-link"><i class="fas fa-link"></i></a><a href="#dcmread：对RS文件的读取" class="headerlink" title="dcmread：对RS文件的读取"></a>dcmread：对RS文件的读取</h3>      <figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root = <span class="string">r'3675.20210523161259.540375.dcm'</span></span><br><span class="line">RS = pydicom.dcmread(root)</span><br></pre></td></tr></tbody></table></div></figure>        <h3 id="StructureSetROISequence：医生对病人做的所有标注">          <a href="#StructureSetROISequence：医生对病人做的所有标注" class="heading-link"><i class="fas fa-link"></i></a><a href="#StructureSetROISequence：医生对病人做的所有标注" class="headerlink" title="StructureSetROISequence：医生对病人做的所有标注"></a>StructureSetROISequence：医生对病人做的所有标注</h3>      <figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root = <span class="string">r'3675.20210523161259.540375.dcm'</span></span><br><span class="line">RS = pydicom.dcmread(root)</span><br><span class="line">num_is = RS.StructureSetROISequence</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(num_is)):</span><br><span class="line">    num_i = <span class="built_in">str</span>(num_is[a])</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">输出：医生做的每一个标注</span><br></pre></td></tr></tbody></table></div></figure><p><img src="/2021/11/26/Python%E4%B9%8Bpydicom%E5%BA%93/RS1.png" alt="RS1"></p><p>目的是根据所需要的标注LO来获取对应标签IS</p>        <h3 id="ROIContourSequence：根据标签IS获取被标注过CT图的UID">          <a href="#ROIContourSequence：根据标签IS获取被标注过CT图的UID" class="heading-link"><i class="fas fa-link"></i></a><a href="#ROIContourSequence：根据标签IS获取被标注过CT图的UID" class="headerlink" title="ROIContourSequence：根据标签IS获取被标注过CT图的UID"></a>ROIContourSequence：根据标签IS获取被标注过CT图的UID</h3>      <figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取的标签IS为3，但是搜索时是从0开始的，所以要减1</span></span><br><span class="line">lab = <span class="number">3</span></span><br><span class="line">lab = lab - <span class="number">1</span></span><br><span class="line"><span class="comment"># 获取IS=3的标注的所有CT图片</span></span><br><span class="line">contour_sequence = RS.ROIContourSequence[lab]</span><br><span class="line"><span class="comment"># 获取被标注图片的数量</span></span><br><span class="line">gtv_nu = <span class="built_in">len</span>(contour_sequence.ContourSequence)</span><br><span class="line"><span class="comment"># 获取CT图片的UID</span></span><br><span class="line">UID = contour_sequence.ContourImageSequence[<span class="number">0</span>].ReferencedSOPInstanceUID</span><br></pre></td></tr></tbody></table></div></figure>        <h2 id="对CT图的操作">          <a href="#对CT图的操作" class="heading-link"><i class="fas fa-link"></i></a><a href="#对CT图的操作" class="headerlink" title="对CT图的操作"></a>对CT图的操作</h2>              <h3 id="pixel-array：读取CT图">          <a href="#pixel-array：读取CT图" class="heading-link"><i class="fas fa-link"></i></a><a href="#pixel-array：读取CT图" class="headerlink" title="pixel_array：读取CT图"></a>pixel_array：读取CT图</h3>      <figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root = <span class="string">r'3675.20210523161259.540375.dcm'</span></span><br><span class="line"><span class="comment"># 读取dcm文件</span></span><br><span class="line">CT = pydicom.dcmread(root)</span><br><span class="line"><span class="comment"># 读取图像矩阵</span></span><br><span class="line">image = CT.pixel_array</span><br></pre></td></tr></tbody></table></div></figure>        <h3 id="PixelSpacing：对CT图片初始操作获取相应的值">          <a href="#PixelSpacing：对CT图片初始操作获取相应的值" class="heading-link"><i class="fas fa-link"></i></a><a href="#PixelSpacing：对CT图片初始操作获取相应的值" class="headerlink" title="PixelSpacing：对CT图片初始操作获取相应的值"></a>PixelSpacing：对CT图片初始操作获取相应的值</h3>      <figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">root = <span class="string">r'3675.20210523161259.540375.dcm'</span></span><br><span class="line"><span class="comment"># 读取dcm文件</span></span><br><span class="line">CT = pydicom.dcmread(root)</span><br><span class="line"><span class="comment"># x轴和y轴像素间的物理间距（mm）</span></span><br><span class="line">spacing = CT.PixelSpacing</span><br><span class="line"><span class="comment"># 将对应轴的物理距离赋值</span></span><br><span class="line">x_gap = pixel_spacing[<span class="number">0</span>]</span><br><span class="line">y_gap = pixel_spacing[<span class="number">1</span>]</span><br><span class="line"><span class="comment"># 获取x，y，z轴的初始点，即世界原点坐标</span></span><br><span class="line">image_position_start = CT.ImagePositionPatient</span><br><span class="line">x_start = <span class="built_in">float</span>(image_position_starting[<span class="number">0</span>])</span><br><span class="line">y_start = <span class="built_in">float</span>(image_position_starting[<span class="number">1</span>])</span><br><span class="line">z_start = <span class="built_in">float</span>(image_position_starting[<span class="number">2</span>])</span><br></pre></td></tr></tbody></table></div></figure><p><img src="/2021/11/26/Python%E4%B9%8Bpydicom%E5%BA%93/xyz.jpg" alt="xyz"></p>        <h3 id="ContourData：对勾勒信息进行处理">          <a href="#ContourData：对勾勒信息进行处理" class="heading-link"><i class="fas fa-link"></i></a><a href="#ContourData：对勾勒信息进行处理" class="headerlink" title="ContourData：对勾勒信息进行处理"></a>ContourData：对勾勒信息进行处理</h3>      <figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取勾勒信息，不过它是x，y，z三个坐标循环显示</span></span><br><span class="line">contours = contour_sequence.ContourData</span><br><span class="line"><span class="comment"># 获取对应的x，y坐标，并转换为数组</span></span><br><span class="line">x_contours = [<span class="built_in">float</span>(number) <span class="keyword">for</span> number <span class="keyword">in</span> contours[<span class="number">0</span>::<span class="number">3</span>]]</span><br><span class="line">y_contours = [<span class="built_in">float</span>(number) <span class="keyword">for</span> number <span class="keyword">in</span> contours[<span class="number">1</span>::<span class="number">3</span>]]</span><br><span class="line">x_contours = np.array(x_coords_of_contours)</span><br><span class="line">y_contours = np.array(y_coords_of_contours)</span><br></pre></td></tr></tbody></table></div></figure>        <h3 id="将世界坐标转成相机坐标">          <a href="#将世界坐标转成相机坐标" class="heading-link"><i class="fas fa-link"></i></a><a href="#将世界坐标转成相机坐标" class="headerlink" title="将世界坐标转成相机坐标"></a>将世界坐标转成相机坐标</h3>      <figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># x_contours，y_contours为世界x，y坐标</span></span><br><span class="line"><span class="comment"># x_start，y_start为世界原点坐标</span></span><br><span class="line"><span class="comment"># x_gap，y_gap为现实物理距离（mm）</span></span><br><span class="line">x_pixel = (x_contours - x_start) / x_gap</span><br><span class="line">y_pixel = (y_contours - y_start) / y_gap</span><br></pre></td></tr></tbody></table></div></figure><p>最后获得的x_pixel，y_pixel为相机的x，y坐标</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这篇文章主要是对CT图片中CT.dcm格式、RS.dcm格式你的一些操作。&lt;/p&gt;

        &lt;h2 id=&quot;对RS-dcm的操作&quot;&gt;
          &lt;a href=&quot;#对RS-dcm的操作&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fa</summary>
      
    
    
    
    
    <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
    <category term="pydicom" scheme="http://yoursite.com/tags/pydicom/"/>
    
  </entry>
  
  <entry>
    <title>Python之txt、excel操作</title>
    <link href="http://yoursite.com/2021/11/25/Python%E4%B9%8Btxt%E6%96%87%E6%9C%AC%E8%AF%BB%E5%86%99%E4%B8%8E%E6%90%9C%E7%B4%A2/"/>
    <id>http://yoursite.com/2021/11/25/Python%E4%B9%8Btxt%E6%96%87%E6%9C%AC%E8%AF%BB%E5%86%99%E4%B8%8E%E6%90%9C%E7%B4%A2/</id>
    <published>2021-11-25T11:51:04.000Z</published>
    <updated>2021-11-26T14:08:51.013Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章主要是记录在做第一次项目中所用到的re库和pandas库读txt、excel文件的操作代码记录，不仅为了记录学习足迹，也为了以后用方便copy。</p>        <h2 id="re库的操作">          <a href="#re库的操作" class="heading-link"><i class="fas fa-link"></i></a><a href="#re库的操作" class="headerlink" title="re库的操作"></a>re库的操作</h2>      <p>主要是re.sub()的使用</p>        <h3 id="re-sub：获取字符串固定位置上的数字">          <a href="#re-sub：获取字符串固定位置上的数字" class="heading-link"><i class="fas fa-link"></i></a><a href="#re-sub：获取字符串固定位置上的数字" class="headerlink" title="re.sub：获取字符串固定位置上的数字"></a>re.sub：获取字符串固定位置上的数字</h3>      <figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">'/Contour Image 6 Sequence  1 item'</span></span><br><span class="line">num = re.sub(<span class="string">r'\D'</span>, <span class="string">""</span>, text[-<span class="number">7</span>:])</span><br><span class="line"><span class="comment"># text[-7:]这种是固定区域搜素</span></span><br><span class="line"><span class="built_in">print</span>(num)</span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></tbody></table></div></figure>        <h2 id="txt文本读写、搜索">          <a href="#txt文本读写、搜索" class="heading-link"><i class="fas fa-link"></i></a><a href="#txt文本读写、搜索" class="headerlink" title="txt文本读写、搜索"></a>txt文本读写、搜索</h2>              <h3 id="open：读取txt文件">          <a href="#open：读取txt文件" class="heading-link"><i class="fas fa-link"></i></a><a href="#open：读取txt文件" class="headerlink" title="open：读取txt文件"></a>open：读取txt文件</h3>      <figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dir</span> = <span class="string">'loss.txt'</span></span><br><span class="line">dir_r = <span class="built_in">open</span>(<span class="built_in">dir</span>, <span class="string">'r'</span>)</span><br><span class="line">content = dir_r.read()</span><br><span class="line"><span class="built_in">print</span>(content)</span><br><span class="line">dir_r.close()</span><br><span class="line">输出：以字符串的形式将txt的内容显示出来</span><br></pre></td></tr></tbody></table></div></figure><p>注意：使用open()最后要close(),而像下面这种使用with open() 本身就自带close(),所以不用写close().</p>        <h3 id="write：在txt文件写入内容">          <a href="#write：在txt文件写入内容" class="heading-link"><i class="fas fa-link"></i></a><a href="#write：在txt文件写入内容" class="headerlink" title="write：在txt文件写入内容"></a>write：在txt文件写入内容</h3>      <figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">loss = <span class="string">'i , 2 , 6 . 9'</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'loss.txt'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">str</span>(loss))</span><br></pre></td></tr></tbody></table></div></figure><p>注意：写入的内容必须是字符串格式</p>        <h3 id="find：在字符串中搜索关键字">          <a href="#find：在字符串中搜索关键字" class="heading-link"><i class="fas fa-link"></i></a><a href="#find：在字符串中搜索关键字" class="headerlink" title="find：在字符串中搜索关键字"></a>find：在字符串中搜索关键字</h3>      <figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d = <span class="string">'_is = RS.StructureSetROI'</span></span><br><span class="line">keyword = <span class="string">'.S'</span></span><br><span class="line"><span class="keyword">if</span> d.find(keyword)!= -<span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'yes'</span>)</span><br></pre></td></tr></tbody></table></div></figure><p>主要是在字符串内进行搜索关键词，返回是否存在，可以运用在对txt文本内容的搜索。</p>        <h3 id="truncate：清空txt文件内容">          <a href="#truncate：清空txt文件内容" class="heading-link"><i class="fas fa-link"></i></a><a href="#truncate：清空txt文件内容" class="headerlink" title="truncate：清空txt文件内容"></a>truncate：清空txt文件内容</h3>      <figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r'loss.txt'</span>, <span class="string">'a+'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> test:</span><br><span class="line">    test.truncate(<span class="number">0</span>)</span><br></pre></td></tr></tbody></table></div></figure>        <h3 id="eval：将字符串转换为对应的列表、字典、元祖">          <a href="#eval：将字符串转换为对应的列表、字典、元祖" class="heading-link"><i class="fas fa-link"></i></a><a href="#eval：将字符串转换为对应的列表、字典、元祖" class="headerlink" title="eval：将字符串转换为对应的列表、字典、元祖"></a>eval：将字符串转换为对应的列表、字典、元祖</h3>      <figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t = <span class="string">"{1:'a', 2:'b', 3:'d'}"</span></span><br><span class="line">b = <span class="built_in">eval</span>(t)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b),b)</span><br><span class="line">输出：&lt;<span class="class"><span class="keyword">class</span>,'<span class="title">str</span>'&gt;, {1:</span><span class="string">'a'</span>, <span class="number">2</span>:<span class="string">'b'</span>, <span class="number">3</span>:<span class="string">'d'</span>}</span><br></pre></td></tr></tbody></table></div></figure><p>注意：只适用于存储形式就是对应的列表、字典、元祖<br>其与str()函数作用正好相反</p>        <h2 id="pandas库的操作">          <a href="#pandas库的操作" class="heading-link"><i class="fas fa-link"></i></a><a href="#pandas库的操作" class="headerlink" title="pandas库的操作"></a>pandas库的操作</h2>              <h3 id="read-excel：excel的读取">          <a href="#read-excel：excel的读取" class="heading-link"><i class="fas fa-link"></i></a><a href="#read-excel：excel的读取" class="headerlink" title="read_excel：excel的读取"></a>read_excel：excel的读取</h3>      <figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">root = <span class="string">r'/Users/frank/Desktop/1.xlsx'</span></span><br><span class="line">df = pd.read_excel(root)</span><br><span class="line"><span class="comment"># 获取excel里面的所有值</span></span><br><span class="line">data = df.values</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line">输出：会形成一个多维数组，data[i]表示第几行的全部数组</span><br></pre></td></tr></tbody></table></div></figure><p><img src="/2021/11/25/Python%E4%B9%8Btxt%E6%96%87%E6%9C%AC%E8%AF%BB%E5%86%99%E4%B8%8E%E6%90%9C%E7%B4%A2/excel1.png" alt="excel"></p>        <h3 id="dict：转换读取的数据">          <a href="#dict：转换读取的数据" class="heading-link"><i class="fas fa-link"></i></a><a href="#dict：转换读取的数据" class="headerlink" title="dict：转换读取的数据"></a>dict：转换读取的数据</h3>      <figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_excel(root)</span><br><span class="line">data = <span class="built_in">dict</span>(df.values)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line">输出：可以转换成一个字典，使其每行一一对应</span><br></pre></td></tr></tbody></table></div></figure><p><img src="/2021/11/25/Python%E4%B9%8Btxt%E6%96%87%E6%9C%AC%E8%AF%BB%E5%86%99%E4%B8%8E%E6%90%9C%E7%B4%A2/excel2.png" alt="excel"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这篇文章主要是记录在做第一次项目中所用到的re库和pandas库读txt、excel文件的操作代码记录，不仅为了记录学习足迹，也为了以后用方便copy。&lt;/p&gt;

        &lt;h2 id=&quot;re库的操作&quot;&gt;
          &lt;a href=&quot;#re库的操作&quot; cl</summary>
      
    
    
    
    
    <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
    <category term="re" scheme="http://yoursite.com/tags/re/"/>
    
    <category term="txt" scheme="http://yoursite.com/tags/txt/"/>
    
    <category term="pandas" scheme="http://yoursite.com/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>Python库之os</title>
    <link href="http://yoursite.com/2021/11/25/Python%E5%BA%93%E4%B9%8Bos/"/>
    <id>http://yoursite.com/2021/11/25/Python%E5%BA%93%E4%B9%8Bos/</id>
    <published>2021-11-25T05:40:13.000Z</published>
    <updated>2021-11-25T14:48:57.586Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章主要是记录在做第一次项目中所用到的os库代码的记录，不仅为了记录学习足迹，也为了以后用方便copy。</p>        <h2 id="os库函数基本应用">          <a href="#os库函数基本应用" class="heading-link"><i class="fas fa-link"></i></a><a href="#os库函数基本应用" class="headerlink" title="os库函数基本应用"></a>os库函数基本应用</h2>              <h3 id="join：合并两个地址">          <a href="#join：合并两个地址" class="heading-link"><i class="fas fa-link"></i></a><a href="#join：合并两个地址" class="headerlink" title="join：合并两个地址"></a>join：合并两个地址</h3>      <figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root_path = <span class="string">r'/Users/frank/Desktop'</span></span><br><span class="line">name = <span class="string">'image.jpg'</span></span><br><span class="line">path = os.path.join(root_path, name)</span><br><span class="line"><span class="built_in">print</span>(path)</span><br><span class="line">输出：/Users/frank/Desktop/image.jpg</span><br></pre></td></tr></tbody></table></div></figure>        <h3 id="basename：分离地址下最后一个文件名">          <a href="#basename：分离地址下最后一个文件名" class="heading-link"><i class="fas fa-link"></i></a><a href="#basename：分离地址下最后一个文件名" class="headerlink" title="basename：分离地址下最后一个文件名"></a>basename：分离地址下最后一个文件名</h3>      <figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root_path = <span class="string">r'/Users/frank/Desktop/image.jpg'</span></span><br><span class="line">name = os.path.basename(root_path)</span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line">输出：image.jpg</span><br></pre></td></tr></tbody></table></div></figure>        <h3 id="isfile：查找文件是否存在">          <a href="#isfile：查找文件是否存在" class="heading-link"><i class="fas fa-link"></i></a><a href="#isfile：查找文件是否存在" class="headerlink" title="isfile：查找文件是否存在"></a>isfile：查找文件是否存在</h3>      <figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root_path = <span class="string">r'/Users/frank/Desktop/image.jpg'</span></span><br><span class="line"><span class="keyword">if</span> os.path.isfile(root_path):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'yes'</span>)</span><br></pre></td></tr></tbody></table></div></figure>        <h3 id="splitext：分离文件的文件名和后缀">          <a href="#splitext：分离文件的文件名和后缀" class="heading-link"><i class="fas fa-link"></i></a><a href="#splitext：分离文件的文件名和后缀" class="headerlink" title="splitext：分离文件的文件名和后缀"></a>splitext：分离文件的文件名和后缀</h3>      <figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">'/Users/frank/Desktop/image.jpg'</span></span><br><span class="line">a = os.path.splitext(name)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">输出：<span class="string">'/Users/frank/Desktop/image'</span>,<span class="string">'.jpg'</span></span><br></pre></td></tr></tbody></table></div></figure>        <h3 id="os-listdir：查找当前目录下的所有文件和文件夹（仅当前目录）">          <a href="#os-listdir：查找当前目录下的所有文件和文件夹（仅当前目录）" class="heading-link"><i class="fas fa-link"></i></a><a href="#os-listdir：查找当前目录下的所有文件和文件夹（仅当前目录）" class="headerlink" title="os.listdir：查找当前目录下的所有文件和文件夹（仅当前目录）"></a>os.listdir：查找当前目录下的所有文件和文件夹（仅当前目录）</h3>      <figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root = <span class="string">r'/Users/frank/Desktop/files'</span></span><br><span class="line">path_list = os.listdir(root)</span><br><span class="line"><span class="comment"># 对文件夹的内容进行排序</span></span><br><span class="line">path_list.sort()</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> path_list:</span><br><span class="line">    files_name = os.path.join(root, name)</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">输出：image1.jpg,image2.jpg,image3.jpg......</span><br></pre></td></tr></tbody></table></div></figure>        <h3 id="os-walk：查找目录下所有的文件或文件夹（包括文件夹里还存放的文件）">          <a href="#os-walk：查找目录下所有的文件或文件夹（包括文件夹里还存放的文件）" class="heading-link"><i class="fas fa-link"></i></a><a href="#os-walk：查找目录下所有的文件或文件夹（包括文件夹里还存放的文件）" class="headerlink" title="os.walk：查找目录下所有的文件或文件夹（包括文件夹里还存放的文件）"></a>os.walk：查找目录下所有的文件或文件夹（包括文件夹里还存放的文件）</h3>      <figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root = <span class="string">r'/Users/frank/Desktop/files'</span></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(root):</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">        files_name = os.path.join(root, name)</span><br><span class="line">        <span class="built_in">print</span>(files_name)</span><br><span class="line">输出：/Users/frank/Desktop/files/img.jpg</span><br><span class="line">     /Users/frank/Desktop/files/image/m.jpg</span><br><span class="line">     /Users/frank/Desktop/files/image/zz.jpg</span><br><span class="line">     /Users/frank/Desktop/files/image/lab/xx.csv</span><br></pre></td></tr></tbody></table></div></figure><p>这个代码是读取根目录下的所有目录文件和文件夹，不仅仅是当前目录下的文件。</p>        <h3 id="通过关键词查找文件">          <a href="#通过关键词查找文件" class="heading-link"><i class="fas fa-link"></i></a><a href="#通过关键词查找文件" class="headerlink" title="通过关键词查找文件"></a>通过关键词查找文件</h3>      <figure class="highlight python"><div class="table-container"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">root_path = <span class="string">r'/Users/frank/Desktop/files/image'</span></span><br><span class="line">keyword = <span class="string">'imag'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findfile</span>(<span class="params">keyword, root_path</span>):</span></span><br><span class="line"><span class="comment"># keyword为关键字，root为文件夹路径</span></span><br><span class="line">    filelist = []  <span class="comment"># 存放每个文件</span></span><br><span class="line">    rfilelist = []  <span class="comment"># 存放匹配文件</span></span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(root):</span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">            filelist.append(os.path.join(root, name))</span><br><span class="line">    <span class="comment"># 遍历路径文件下的所有文件夹，将所有文件放入filelist</span></span><br><span class="line">    <span class="comment"># i为文件的绝对地址</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> filelist:</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(i):</span><br><span class="line">        <span class="comment"># basename函数将地址最后文件名分离出来</span></span><br><span class="line">            <span class="keyword">if</span> keyword <span class="keyword">in</span> os.path.basename(i):</span><br><span class="line">                rfilelist.append(i)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> rfilelist</span><br><span class="line">输出：在image文件夹内查找存在“imag”的文件地址</span><br></pre></td></tr></tbody></table></div></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这篇文章主要是记录在做第一次项目中所用到的os库代码的记录，不仅为了记录学习足迹，也为了以后用方便copy。&lt;/p&gt;

        &lt;h2 id=&quot;os库函数基本应用&quot;&gt;
          &lt;a href=&quot;#os库函数基本应用&quot; class=&quot;heading-lin</summary>
      
    
    
    
    
    <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
    <category term="os" scheme="http://yoursite.com/tags/os/"/>
    
  </entry>
  
</feed>
